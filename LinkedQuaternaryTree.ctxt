#BlueJ class context
comment0.target=LinkedQuaternaryTree
comment1.params=
comment1.target=LinkedQuaternaryTree()
comment1.text=\ \n\ Constructor.\ Creates\ empty\ quaternary\ tree.\ \n
comment10.params=
comment10.target=int\ size()
comment10.text=\ \n\ Returns\ the\ number\ of\ nodes\ in\ the\ tree.\ \n\ \n\ @return\ integer\ of\ the\ count\ \n
comment11.params=
comment11.target=java.util.Iterator\ levelorder()
comment11.text=\ \n\ Populates\ and\ returns\ an\ iterator\ containing\ the\ elements\ \n\ in\ the\ quaternary\ tree\ using\ a\ levelorder\ traversal.\ \n\ \n\ @return\ iterator\ of\ generic\ elements\ \n
comment12.params=
comment12.target=java.util.Iterator\ iterator()
comment12.text=\ \n\ Satisfies\ iterable\ interface\ using\ preorder\ traversal.\ \n\ \n\ @return\ iterator\ of\ generic\ type\ T\ \n
comment13.params=target
comment13.target=boolean\ containsChild(java.lang.String)
comment13.text=\ \n\ Checks\ if\ the\ current\ tree\ contains\ a\ child\ subtree\ that\ has\ a\ root\ \n\ element\ that\ matches\ the\ target.\ \n\ \n\ @return\ boolean\ true\ if\ the\ child\ exists,\ false\ otherwise\n
comment14.params=
comment14.target=boolean\ isEmpty()
comment14.text=\ \n\ Checks\ if\ the\ tree\ is\ empty.\ \n\ \n\ @return\ boolean\ true\ if\ empty,\ false\ otherwise\ \n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\ \n\ Formats\ the\ tree\ through\ an\ iterator.\ \n\ \n\ @return\ String\ that\ contains\ the\ root\ elements\ of\ each\ node\n
comment16.params=
comment16.target=java.util.Iterator\ preorder()
comment16.text=\ \n\ Traversal\ that\ uses\ ArrayIterator.\ \n\ \n\ @return\ iterator\ that\ contains\ all\ the\ root\ elements\ \n
comment17.params=
comment17.target=boolean\ hasChild()
comment17.text=\ \n\ Checks\ if\ this\ is\ a\ leaf.\ Leaves\ have\ no\ children.\ \n\ \n\ @return\ boolean\ true\ if\ it\ has\ children,\ false\ if\ it's\ a\ leaf.\ \n
comment18.params=subtree
comment18.target=void\ setFirst(LinkedQuaternaryTree)
comment18.text=\ \n\ Setter\ functions\ for\ the\ left\ subtree.\ \n\ \n\ @param\ subtree\ to\ set\ as\ the\ child\n
comment19.params=subtree
comment19.target=void\ setSecond(LinkedQuaternaryTree)
comment19.text=\ \n\ Setter\ functions\ for\ the\ left-middle\ subtree.\ \n\ \n\ @param\ subtree\ to\ set\ as\ the\ child\n
comment2.params=element
comment2.target=LinkedQuaternaryTree(java.lang.Object)
comment2.text=\ \n\ Constructor.\ Creates\ a\ quaternary\ tree\ with\ the\ specified\ element\ as\ its\ root.\n\ \n\ @param\ element\ is\ a\ generic\ type\ object\ to\ be\ stored\ in\ the\ root\ \n
comment20.params=subtree
comment20.target=void\ setThird(LinkedQuaternaryTree)
comment20.text=\ \n\ Setter\ functions\ for\ the\ right-middle\ subtree.\ \n\ \n\ @param\ subtree\ to\ set\ as\ the\ child\n
comment21.params=subtree
comment21.target=void\ setFourth(LinkedQuaternaryTree)
comment21.text=\ \n\ Setter\ functions\ for\ the\ right\ subtree.\ \n\ \n\ @param\ subtree\ to\ set\ as\ the\ child\n
comment22.params=subtree
comment22.target=void\ setNext(LinkedQuaternaryTree)
comment22.text=\ \n\ Setter\ that\ places\ the\ subtree\ in\ the\ next\ available\ spot.\ \n\ Will\ not\ insert\ if\ all\ four\ spots\ are\ occupied.\ \n\ \n\ @param\ subtree\ that\ will\ be\ placed\ in\ the\ next\ available\ spot\ as\ \n\ a\ child\ \n
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment23.text=\ \n\ Main\ method\ with\ test\ codes.\ \n
comment3.params=element\ first\ second\ third\ fourth
comment3.target=LinkedQuaternaryTree(java.lang.Object,\ LinkedQuaternaryTree,\ LinkedQuaternaryTree,\ LinkedQuaternaryTree,\ LinkedQuaternaryTree)
comment3.text=\ \n\ Constructor.\ Creates\ a\ quaternary\ tree\ with\ the\ four\ specified\ subtrees\n\ \n\ @param\ element\ is\ the\ generic\ type\ element\ to\ be\ stored\ in\ the\ root\ \n\ @param\ first,\ second,\ third,\ fourth\ are\ all\ LinkedQuaternaryTree\ \n\ objects\ of\ generic\ type\ \n
comment4.params=
comment4.target=java.lang.Object\ getRootElement()
comment4.text=\ \n\ Returns\ the\ element\ stored\ in\ the\ root\ of\ the\ tree.\ Throws\ an\n\ EmptyCollectionException\ if\ the\ tree\ is\ empty.\n\n\ @return\ genetic\ type\ element\ stored\ in\ the\ root\n
comment5.params=
comment5.target=LinkedQuaternaryTree\ getFirst()
comment5.text=\ \n\ Returns\ the\ left\ subtree\ of\ the\ root\ of\ this\ tree.\n\ \n\ @return\ LinkedQuaternaryTree<T>\ of\ the\ left\ subtree\ \n
comment6.params=
comment6.target=LinkedQuaternaryTree\ getSecond()
comment6.text=\ \n\ Returns\ the\ left-middle\ subtree\ of\ the\ root\ of\ this\ tree.\n\ \n\ @return\ LinkedQuaternaryTree<T>\ of\ the\ left-middle\ subtree\ \n
comment7.params=
comment7.target=LinkedQuaternaryTree\ getThird()
comment7.text=\ \n\ Returns\ the\ right-middle\ subtree\ of\ the\ root\ of\ this\ tree.\n\ \n\ @return\ LinkedQuaternaryTree<T>\ of\ the\ right-middle\ subtree\ \n
comment8.params=
comment8.target=LinkedQuaternaryTree\ getFourth()
comment8.text=\ \n\ Returns\ the\ right\ subtree\ of\ the\ root\ of\ this\ tree.\n\ \n\ @return\ LinkedQuaternaryTree<T>\ of\ the\ right\ subtree\ \n
comment9.params=target
comment9.target=LinkedQuaternaryTree\ find(java.lang.String)
comment9.text=\n\ Returns\ the\ subtree\ if\ that\ root\ matches\ the\ target.\ \n\ This\ can\ only\ be\ used\ to\ find\ the\ children\u2019s\ root\ nodes.\ \n\ \n\ @param\ target\ is\ the\ string\ object\ to\ be\ found\ in\ the\ children's\ \n\ root\ elements\ \n\ @return\ subtree\ of\ LinkedQuaternaryTree<T>\ if\ the\ target\ matches\ \n\ that\ child's\ root\ element\ \n
numComments=24
