#BlueJ class context
comment0.target=SubwayGraph
comment1.params=
comment1.target=SubwayGraph()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ SubwayGraph\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ @return\ \ String\ representation\ of\ this\ SubwayGraph\n
comment3.params=
comment3.target=java.lang.Iterable\ getStations()
comment3.text=\n\ Converts\ each\ station\ into\ an\ Iterable\ form,\ as\ provided\ by\ AdjListsGraph\n\ @return\ \ Iterable<SubwayStation>\ form\ of\ the\ vertices\ of\ this\ graph\n
comment4.params=s
comment4.target=SubwayStation\ contains(java.lang.String)
comment4.text=\n\ Returns\ if\ the\ graph\ contains\ a\ node\ with\ a\ name\ equal\ to\ the\ string\ provided.\n\ \n\ @param\ String\n\ @return\ the\ SubwayStation\ if\ graph\ contains\ a\ node\ with\ provided\ name,\ null\ otherwise.\n\ \n\ Sierra\ Chiao\n
comment5.params=startStation\ endStation
comment5.target=java.util.LinkedList\ shortestPath(java.lang.String,\ java.lang.String)
comment5.text=\n\ Find\ the\ shortest\ path\ from\ start\ SubwayStation\ to\ end\ SubwayStation\n\ Uses\ breadth-first-search\ algorithm\ to\ determine\ path\n\ @param\ \ startStation\ \ SubwayStation\ path\ starts\ at\n\ @param\ \ endStation\ \ SubwayStation\ path\ ends\ at\n\ @return\ \ shortest\ LinkedList<SubwayStation>\ path\ between\ the\ two\ stations\n
comment6.params=list
comment6.target=java.lang.String\ formatPath(java.util.LinkedList)
comment6.text=\n\ Formats\ a\ linked\ list\ of\ SubwayStation\ objects\ into\ a\ string,\ where\ each\ station\n\ is\ represented\ by\ its\ name\ and\ line\ transfers\ are\ present.\ Arrows\ (->)\ are\ also\n\ added\ between\ each\ station\ object.\n\ \n\ @param\ Linked\ list\ of\ SubwayStation\ objects\n\ @return\ a\ formatted\ representation\ of\ the\ subway\ route\ given\ in\ the\ linked\ list\n\ \n\ Sierra\ Chiao\n
comment7.params=startStation\ endStation
comment7.target=int\ pathLength(java.lang.String,\ java.lang.String)
comment7.text=\n\ Find\ the\ length\ of\ the\ shortest\ path\ (number\ of\ SubwayStation\ objects)\ between\ two\ stations\n\ @param\ \ startStation\ \ SubwayStation\ path\ starts\ at\n\ @param\ \ endStation\ \ SubwayStation\ path\ ends\ at\n\ @return\ \ integer\ value\ of\ the\ path\ length\ between\ the\ two\ stations\n
comment8.params=destination
comment8.target=java.lang.String\ findDestinationStation(java.lang.String)
comment8.text=\n\ Finds\ the\ SubwayStation\ associated\ with\ the\ given\ destination\n\ Returns\ the\ station\ if\ the\ destination\ exists\n\ Otherwise,\ returns\ null\n\ @param\ \ destination\ \ destination\ whose\ corresponding\ station\ is\ to\ be\ determined\n\ @return\ \ String\ representation\ of\ the\ SubwayStation\ with\ given\ destination\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ Main\ method\ to\ test\ the\ contents\ of\ the\ class\n
numComments=10
